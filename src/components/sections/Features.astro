---
import type { Feature } from '@data/features';
import Button from '@components/ui/Button.astro';
import Eyebrow from '@components/ui/Eyebrow.astro';
import { getPaddingClass, getBackgroundColor, getTextColor } from '@utils/styleUtils';
import type { PaddingSize, ThemeColor } from '@utils/styleUtils';

export interface Props {
    content: {
        eyebrow?: string;
        title?: string;
        description?: string;
        button?: {
            text: string;
            link: string;
            variant?: 'primary' | 'secondary' | 'ghostLight' | 'ghostDark';
        };
        features: Feature[];
    };
    background?: ThemeColor;
    padding?: PaddingSize;
    paddingTop?: PaddingSize;
    paddingBottom?: PaddingSize;
    iconType?: 'checkmark' | 'numbered';
    showIcons?: boolean;
}

const {
    content: {
        eyebrow,
        title,
        description,
        button,
        features
    },
    background = 'base',
    iconType = 'checkmark',
    showIcons = true
} = Astro.props;

const bgColor = getBackgroundColor(background);
const textColor = getTextColor(background);
const paddingClass = getPaddingClass({ 
    padding: Astro.props.padding,
    paddingTop: Astro.props.paddingTop,
    paddingBottom: Astro.props.paddingBottom 
});
---

<section class:list={["relative", bgColor, paddingClass]}>
    <div class="site-container px-4">
        {(title || description) && (
            <div class="text-center mb-16 max-w-3xl mx-auto">
                {eyebrow && (
                    <Eyebrow 
                        text={eyebrow} 
                        background={background} 
                    />
                )}
                {title && (
                    <h2 class:list={[textColor]} data-aos="fade-up">
                        {title}
                    </h2>
                )}
                {description && (
                    <p class:list={["mt-4", textColor, "opacity-90"]} data-aos="fade-up" data-aos-delay="100">
                        {description}
                    </p>
                )}
                {button && (
                    <div class="mt-8" data-aos="fade-up" data-aos-delay="200">
                        <Button
                            href={button.link}
                            variant={button.variant || 'primary'}
                        >
                            {button.text}
                        </Button>
                    </div>
                )}
            </div>
        )}

        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-auto-fit gap-8 auto-rows-fr">
            {features.map((feature, index) => (
                <div 
                    class:list={[
                        "p-6 rounded-lg border border-black",
                        background === 'dark' ? 'bg-background-base/10' : 'bg-background/90',
                        "flex flex-col"
                    ]}
                    data-aos="fade-up"
                    data-aos-delay={index * 100}
                >
                    {showIcons && (
                        <div class:list={[
                            "flex items-center justify-center rounded-lg mb-4",
                            "bg-primary",
                            iconType === 'numbered' ? 'px-3 py-2' : 'w-12 h-12'
                        ]}>
                            {iconType === 'numbered' ? (
                                <span class="text-white text-sm font-bold whitespace-nowrap">Step {index + 1}</span>
                            ) : (
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="3" stroke="currentColor" class="w-6 h-6 text-white">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12.75l6 6 9-13.5" />
                                </svg>
                            )}
                        </div>
                    )}
                    <h3 class:list={["text-h4 mb-2", textColor]}>
                        {feature.title}
                    </h3>
                    <p class:list={["text-base", textColor, "opacity-90"]}>
                        {feature.description}
                    </p>
                    {feature.link && (
                        <a
                            href={feature.link}
                            target={feature.linkTarget || '_self'}
                            class="mt-4 inline-flex items-center text-primary hover:underline font-semibold"
                            {...(feature.linkTarget === '_blank' && { rel: 'noopener noreferrer' })}
                        >
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-5 h-5 mr-2">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25" />
                            </svg>
                            {feature.linkText || 'Learn More'}
                        </a>
                    )}
                </div>
            ))}
        </div>
    </div>
</section>

<style>
    .grid-cols-auto-fit {
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    }
</style>
